package se.yrgo.dataaccess;

import java.sql.*;
import java.util.*;
import java.util.Date;

import org.springframework.jdbc.core.*;

import se.yrgo.domain.*;

public class CustomerDaoJdbcImpl implements CustomerDao {
    private static final String GET_ALL_CUSTOMER_SQL = "SELECT * FROM CUSTOMER";
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String CREATE_SQL = "INSERT INTO CUSTOMER (COMPANYNAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?)";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANYNAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String GET_BY_ID_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_BY_NAME_SQL = "SELECT * FROM CUSTOMER WHERE COMPANYNAME=?";
    private static final String ADD_CALL_SQL = "INSERT INTO CUSTOMER_CALL(CUSTOMER_ID, TIMEANDDATE, NOTES) VALUES (?,?,?)";
    private static final String GET_FULL_CUSTOMER_DETAILS_SQL = "SELECT CA.TIMEANDDATE, CA.NOTES FROM CALLS AS CA WHERE CUSTOMER_ID=?";

    private JdbcTemplate template;

    public CustomerDaoJdbcImpl(JdbcTemplate temp) {
        this.template = temp;
    }

    private void createTables() {
        try {
            this.template.update(
                    "CREATE TABLE CUSTOMER (CUSTOMER_ID integer generated by default as identity (start with 1), COMPANYNAME VARCHAR(100), EMAIL VARCHAR(100), TELEPHONE VARCHAR(20), NOTES VARCHAR(500))");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Customer table exists");
        }

        try {
            this.template.update(
                    "CREATE TABLE CUSTOMER_CALL (CALL_ID integer generated by default as identity (start with 1), CUSTOMER_ID VARCHAR(20), TIMEANDDATE DATE, NOTES VARCHAR(500))");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Call table exists");
        }
    }

    @Override
    public void create(Customer customer) {
        template.update(CREATE_SQL, customer.getCompanyName(), customer.getEmail(), customer.getTelephone(),
                customer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return template.queryForObject(GET_BY_ID_SQL, new CustomerRowMapper(), customerId);
    }

    @Override
    public List<Customer> getByName(String name) {
        List<Customer> list = new ArrayList<>();
        list.add(template.queryForObject(GET_BY_NAME_SQL, new CustomerRowMapper(), name));
        return list;
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        template.update(UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(), customerToUpdate.getNotes());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        template.update(DELETE_SQL, oldCustomer);
    }

    @Override
    public List<Customer> getAllCustomers() {
        List<Customer> list = new ArrayList<>();
        list.add(template.queryForObject(GET_ALL_CUSTOMER_SQL, new CustomerRowMapper()));
        return list;
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {

        List<Call> calls = template.query(
                GET_FULL_CUSTOMER_DETAILS_SQL,
                (rs, rowNum) -> {
                    Date timeAndDate = rs.getDate(1);
                    String notes = rs.getString(2);

                    return new Call(notes, timeAndDate);
                },
                customerId);

        Customer customer = getById(customerId);

        customer.setCalls(calls);

        return customer;
    }

    @Override
    public void addCall(String customerId, Call newCall) throws RecordNotFoundException {
        template.update(ADD_CALL_SQL, customerId, newCall.getTimeAndDate(), newCall.getNotes());
    }

}

class CustomerRowMapper implements RowMapper<Customer> {
    public Customer mapRow(ResultSet rs, int arg1) throws SQLException {
        String customerId = rs.getString(1);
        String companyName = rs.getString(2);
        String email = rs.getString(3);
        String telephone = rs.getString(4);
        String notes = rs.getString(5);

        return new Customer("" + customerId, companyName, email, telephone, notes);
    }
}
